// Mocks generated by Mockito 5.0.7 from annotations
// in ml_algo/test/mocks.dart.
// Do not manually edit this file.

import 'dart:collection' as _i13;

import 'package:ml_algo/src/classifier/classifier.dart' as _i53;
import 'package:ml_algo/src/classifier/decision_tree_classifier/decision_tree_classifier.dart'
    as _i11;
import 'package:ml_algo/src/classifier/decision_tree_classifier/decision_tree_classifier_factory.dart'
    as _i44;
import 'package:ml_algo/src/classifier/knn_classifier/knn_classifier.dart'
    as _i20;
import 'package:ml_algo/src/classifier/knn_classifier/knn_classifier_factory.dart'
    as _i59;
import 'package:ml_algo/src/classifier/logistic_regressor/logistic_regressor.dart'
    as _i31;
import 'package:ml_algo/src/classifier/logistic_regressor/logistic_regressor_factory.dart'
    as _i76;
import 'package:ml_algo/src/classifier/softmax_regressor/softmax_regressor.dart'
    as _i29;
import 'package:ml_algo/src/classifier/softmax_regressor/softmax_regressor_factory.dart'
    as _i73;
import 'package:ml_algo/src/common/distribution_calculator/distribution_calculator.dart'
    as _i14;
import 'package:ml_algo/src/common/distribution_calculator/distribution_calculator_factory.dart'
    as _i48;
import 'package:ml_algo/src/cost_function/cost_function.dart' as _i10;
import 'package:ml_algo/src/cost_function/cost_function_factory.dart' as _i41;
import 'package:ml_algo/src/cost_function/cost_function_type.dart' as _i42;
import 'package:ml_algo/src/knn_kernel/kernel.dart' as _i19;
import 'package:ml_algo/src/knn_kernel/kernel_factory.dart' as _i58;
import 'package:ml_algo/src/knn_kernel/kernel_type.dart' as _i57;
import 'package:ml_algo/src/knn_solver/knn_solver.dart' as _i18;
import 'package:ml_algo/src/knn_solver/knn_solver_factory.dart' as _i56;
import 'package:ml_algo/src/knn_solver/neigbour.dart' as _i55;
import 'package:ml_algo/src/linear_optimizer/convergence_detector/convergence_detector.dart'
    as _i23;
import 'package:ml_algo/src/linear_optimizer/convergence_detector/convergence_detector_factory.dart'
    as _i63;
import 'package:ml_algo/src/linear_optimizer/gradient_optimizer/learning_rate_generator/learning_rate_generator.dart'
    as _i15;
import 'package:ml_algo/src/linear_optimizer/gradient_optimizer/learning_rate_generator/learning_rate_generator_factory.dart'
    as _i49;
import 'package:ml_algo/src/linear_optimizer/gradient_optimizer/learning_rate_generator/learning_rate_type.dart'
    as _i50;
import 'package:ml_algo/src/linear_optimizer/initial_coefficients_generator/initial_coefficients_generator.dart'
    as _i12;
import 'package:ml_algo/src/linear_optimizer/initial_coefficients_generator/initial_coefficients_generator_factory.dart'
    as _i46;
import 'package:ml_algo/src/linear_optimizer/initial_coefficients_generator/initial_coefficients_type.dart'
    as _i47;
import 'package:ml_algo/src/linear_optimizer/linear_optimizer.dart' as _i22;
import 'package:ml_algo/src/linear_optimizer/linear_optimizer_factory.dart'
    as _i60;
import 'package:ml_algo/src/linear_optimizer/linear_optimizer_type.dart'
    as _i61;
import 'package:ml_algo/src/linear_optimizer/regularization_type.dart' as _i62;
import 'package:ml_algo/src/link_function/link_function.dart' as _i43;
import 'package:ml_algo/src/math/randomizer/randomizer.dart' as _i7;
import 'package:ml_algo/src/math/randomizer/randomizer_factory.dart' as _i40;
import 'package:ml_algo/src/metric/metric.dart' as _i6;
import 'package:ml_algo/src/metric/metric_factory.dart' as _i38;
import 'package:ml_algo/src/metric/metric_type.dart' as _i39;
import 'package:ml_algo/src/model_selection/assessable.dart' as _i66;
import 'package:ml_algo/src/model_selection/model_assessor/classifier_assessor.dart'
    as _i52;
import 'package:ml_algo/src/model_selection/split_indices_provider/split_indices_provider.dart'
    as _i24;
import 'package:ml_algo/src/model_selection/split_indices_provider/split_indices_provider_factory.dart'
    as _i64;
import 'package:ml_algo/src/model_selection/split_indices_provider/split_indices_provider_type.dart'
    as _i65;
import 'package:ml_algo/src/predictor/predictor.dart' as _i74;
import 'package:ml_algo/src/regressor/knn_regressor/knn_regressor.dart' as _i28;
import 'package:ml_algo/src/regressor/knn_regressor/knn_regressor_factory.dart'
    as _i72;
import 'package:ml_algo/src/regressor/linear_regressor/linear_regressor.dart'
    as _i30;
import 'package:ml_algo/src/regressor/linear_regressor/linear_regressor_factory.dart'
    as _i75;
import 'package:ml_algo/src/tree_trainer/decision_tree_trainer.dart' as _i71;
import 'package:ml_algo/src/tree_trainer/leaf_detector/leaf_detector.dart'
    as _i17;
import 'package:ml_algo/src/tree_trainer/leaf_detector/leaf_detector_factory.dart'
    as _i51;
import 'package:ml_algo/src/tree_trainer/leaf_label/leaf_label.dart' as _i16;
import 'package:ml_algo/src/tree_trainer/leaf_label/leaf_label_factory.dart'
    as _i25;
import 'package:ml_algo/src/tree_trainer/leaf_label/leaf_label_factory_factory.dart'
    as _i67;
import 'package:ml_algo/src/tree_trainer/leaf_label/leaf_label_factory_type.dart'
    as _i68;
import 'package:ml_algo/src/tree_trainer/split_assessor/split_assessor.dart'
    as _i4;
import 'package:ml_algo/src/tree_trainer/split_assessor/split_assessor_factory.dart'
    as _i34;
import 'package:ml_algo/src/tree_trainer/split_assessor/split_assessor_type.dart'
    as _i35;
import 'package:ml_algo/src/tree_trainer/split_selector/split_selector.dart'
    as _i26;
import 'package:ml_algo/src/tree_trainer/split_selector/split_selector_factory.dart'
    as _i69;
import 'package:ml_algo/src/tree_trainer/split_selector/split_selector_type.dart'
    as _i70;
import 'package:ml_algo/src/tree_trainer/splitter/nominal_splitter/nominal_splitter.dart'
    as _i3;
import 'package:ml_algo/src/tree_trainer/splitter/nominal_splitter/nominal_splitter_factory.dart'
    as _i33;
import 'package:ml_algo/src/tree_trainer/splitter/numerical_splitter/numerical_splitter.dart'
    as _i2;
import 'package:ml_algo/src/tree_trainer/splitter/numerical_splitter/numerical_splitter_factory.dart'
    as _i32;
import 'package:ml_algo/src/tree_trainer/splitter/splitter.dart' as _i5;
import 'package:ml_algo/src/tree_trainer/splitter/splitter_factory.dart'
    as _i36;
import 'package:ml_algo/src/tree_trainer/splitter/splitter_type.dart' as _i37;
import 'package:ml_algo/src/tree_trainer/tree_node/tree_node.dart' as _i27;
import 'package:ml_dataframe/src/data_frame/data_frame.dart' as _i21;
import 'package:ml_linalg/distance.dart' as _i54;
import 'package:ml_linalg/dtype.dart' as _i45;
import 'package:ml_linalg/matrix.dart' as _i8;
import 'package:ml_linalg/vector.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

class _FakeNumericalTreeSplitter extends _i1.Fake
    implements _i2.NumericalTreeSplitter {}

class _FakeNominalTreeSplitter extends _i1.Fake
    implements _i3.NominalTreeSplitter {}

class _FakeTreeSplitAssessor extends _i1.Fake implements _i4.TreeSplitAssessor {
}

class _FakeTreeSplitter extends _i1.Fake implements _i5.TreeSplitter {}

class _FakeMetric extends _i1.Fake implements _i6.Metric {}

class _FakeRandomizer extends _i1.Fake implements _i7.Randomizer {}

class _FakeMatrix extends _i1.Fake implements _i8.Matrix {}

class _FakeVector extends _i1.Fake implements _i9.Vector {}

class _FakeCostFunction extends _i1.Fake implements _i10.CostFunction {}

class _FakeDecisionTreeClassifier extends _i1.Fake
    implements _i11.DecisionTreeClassifier {}

class _FakeInitialCoefficientsGenerator extends _i1.Fake
    implements _i12.InitialCoefficientsGenerator {}

class _FakeHashMap<K, V> extends _i1.Fake implements _i13.HashMap<K, V> {}

class _FakeDistributionCalculator extends _i1.Fake
    implements _i14.DistributionCalculator {}

class _FakeLearningRateGenerator extends _i1.Fake
    implements _i15.LearningRateGenerator {}

class _FakeTreeLeafLabel extends _i1.Fake implements _i16.TreeLeafLabel {}

class _FakeTreeLeafDetector extends _i1.Fake implements _i17.TreeLeafDetector {}

class _FakeKnnSolver extends _i1.Fake implements _i18.KnnSolver {}

class _FakeKernel extends _i1.Fake implements _i19.Kernel {}

class _FakeKnnClassifier extends _i1.Fake implements _i20.KnnClassifier {}

class _FakeDataFrame extends _i1.Fake implements _i21.DataFrame {}

class _FakeLinearOptimizer extends _i1.Fake implements _i22.LinearOptimizer {}

class _FakeConvergenceDetector extends _i1.Fake
    implements _i23.ConvergenceDetector {}

class _FakeSplitIndicesProvider extends _i1.Fake
    implements _i24.SplitIndicesProvider {}

class _FakeTreeLeafLabelFactory extends _i1.Fake
    implements _i25.TreeLeafLabelFactory {}

class _FakeTreeSplitSelector extends _i1.Fake
    implements _i26.TreeSplitSelector {}

class _FakeTreeNode extends _i1.Fake implements _i27.TreeNode {}

class _FakeKnnRegressor extends _i1.Fake implements _i28.KnnRegressor {}

class _FakeSoftmaxRegressor extends _i1.Fake implements _i29.SoftmaxRegressor {}

class _FakeLinearRegressor extends _i1.Fake implements _i30.LinearRegressor {}

class _FakeLogisticRegressor extends _i1.Fake
    implements _i31.LogisticRegressor {}

/// A class which mocks [NumericalTreeSplitterFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockNumericalTreeSplitterFactory extends _i1.Mock
    implements _i32.NumericalTreeSplitterFactory {
  MockNumericalTreeSplitterFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NumericalTreeSplitter create() => (super.noSuchMethod(
      Invocation.method(#create, []),
      returnValue: _FakeNumericalTreeSplitter()) as _i2.NumericalTreeSplitter);
}

/// A class which mocks [NominalTreeSplitterFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockNominalTreeSplitterFactory extends _i1.Mock
    implements _i33.NominalTreeSplitterFactory {
  MockNominalTreeSplitterFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.NominalTreeSplitter create() =>
      (super.noSuchMethod(Invocation.method(#create, []),
          returnValue: _FakeNominalTreeSplitter()) as _i3.NominalTreeSplitter);
}

/// A class which mocks [TreeSplitAssessor].
///
/// See the documentation for Mockito's code generation for more information.
class MockTreeSplitAssessor extends _i1.Mock implements _i4.TreeSplitAssessor {
  MockTreeSplitAssessor() {
    _i1.throwOnMissingStub(this);
  }

  @override
  double getAggregatedError(
          Iterable<_i8.Matrix>? splitObservations, int? targetId) =>
      (super.noSuchMethod(
          Invocation.method(#getAggregatedError, [splitObservations, targetId]),
          returnValue: 0.0) as double);
  @override
  double getError(_i8.Matrix? splitObservations, int? targetId) => (super
      .noSuchMethod(Invocation.method(#getError, [splitObservations, targetId]),
          returnValue: 0.0) as double);
}

/// A class which mocks [TreeSplitAssessorFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockTreeSplitAssessorFactory extends _i1.Mock
    implements _i34.TreeSplitAssessorFactory {
  MockTreeSplitAssessorFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.TreeSplitAssessor createByType(_i35.TreeSplitAssessorType? type) =>
      (super.noSuchMethod(Invocation.method(#createByType, [type]),
          returnValue: _FakeTreeSplitAssessor()) as _i4.TreeSplitAssessor);
}

/// A class which mocks [NumericalTreeSplitter].
///
/// See the documentation for Mockito's code generation for more information.
class MockNumericalTreeSplitter extends _i1.Mock
    implements _i2.NumericalTreeSplitter {
  MockNumericalTreeSplitter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<_i27.TreeNode, _i8.Matrix> split(
          _i8.Matrix? samples, int? splittingIdx, double? splittingValue) =>
      (super.noSuchMethod(
          Invocation.method(#split, [samples, splittingIdx, splittingValue]),
          returnValue: <_i27.TreeNode,
              _i8.Matrix>{}) as Map<_i27.TreeNode, _i8.Matrix>);
}

/// A class which mocks [NominalTreeSplitter].
///
/// See the documentation for Mockito's code generation for more information.
class MockNominalTreeSplitter extends _i1.Mock
    implements _i3.NominalTreeSplitter {
  MockNominalTreeSplitter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<_i27.TreeNode, _i8.Matrix> split(
          _i8.Matrix? samples, int? splittingIdx, List<num>? uniqueValues) =>
      (super.noSuchMethod(
              Invocation.method(#split, [samples, splittingIdx, uniqueValues]),
              returnValue: <_i27.TreeNode, _i8.Matrix>{})
          as Map<_i27.TreeNode, _i8.Matrix>);
}

/// A class which mocks [TreeSplitter].
///
/// See the documentation for Mockito's code generation for more information.
class MockTreeSplitter extends _i1.Mock implements _i5.TreeSplitter {
  MockTreeSplitter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<_i27.TreeNode, _i8.Matrix> split(
          _i8.Matrix? samples, int? splittingIdx, int? targetId,
          [List<num>? uniqueValues]) =>
      (super.noSuchMethod(
              Invocation.method(
                  #split, [samples, splittingIdx, targetId, uniqueValues]),
              returnValue: <_i27.TreeNode, _i8.Matrix>{})
          as Map<_i27.TreeNode, _i8.Matrix>);
}

/// A class which mocks [TreeSplitterFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockTreeSplitterFactory extends _i1.Mock
    implements _i36.TreeSplitterFactory {
  MockTreeSplitterFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.TreeSplitter createByType(_i37.TreeSplitterType? type,
          _i35.TreeSplitAssessorType? assessorType) =>
      (super.noSuchMethod(
          Invocation.method(#createByType, [type, assessorType]),
          returnValue: _FakeTreeSplitter()) as _i5.TreeSplitter);
}

/// A class which mocks [MetricFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockMetricFactory extends _i1.Mock implements _i38.MetricFactory {
  MockMetricFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Metric createByType(_i39.MetricType? metricType) =>
      (super.noSuchMethod(Invocation.method(#createByType, [metricType]),
          returnValue: _FakeMetric()) as _i6.Metric);
}

/// A class which mocks [Metric].
///
/// See the documentation for Mockito's code generation for more information.
class MockMetric extends _i1.Mock implements _i6.Metric {
  MockMetric() {
    _i1.throwOnMissingStub(this);
  }

  @override
  double getScore(_i8.Matrix? predictedLabels, _i8.Matrix? origLabels) => (super
      .noSuchMethod(Invocation.method(#getScore, [predictedLabels, origLabels]),
          returnValue: 0.0) as double);
}

/// A class which mocks [RandomizerFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockRandomizerFactory extends _i1.Mock implements _i40.RandomizerFactory {
  MockRandomizerFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Randomizer create([int? seed]) =>
      (super.noSuchMethod(Invocation.method(#create, [seed]),
          returnValue: _FakeRandomizer()) as _i7.Randomizer);
}

/// A class which mocks [Randomizer].
///
/// See the documentation for Mockito's code generation for more information.
class MockRandomizer extends _i1.Mock implements _i7.Randomizer {
  MockRandomizer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Iterable<int> getIntegerInterval(int? lowerBound, int? upperBound,
          {int? intervalLength}) =>
      (super.noSuchMethod(
          Invocation.method(#getIntegerInterval, [lowerBound, upperBound],
              {#intervalLength: intervalLength}),
          returnValue: <int>[]) as Iterable<int>);
  @override
  Iterable<double> getDoubleInterval(double? lowerBound, double? upperBound) =>
      (super.noSuchMethod(
          Invocation.method(#getDoubleInterval, [lowerBound, upperBound]),
          returnValue: <double>[]) as Iterable<double>);
  @override
  int getIntegerFromInterval(int? start, int? end) => (super.noSuchMethod(
      Invocation.method(#getIntegerFromInterval, [start, end]),
      returnValue: 0) as int);
  @override
  double getDoubleFromInterval(double? start, double? end) => (super
      .noSuchMethod(Invocation.method(#getDoubleFromInterval, [start, end]),
          returnValue: 0.0) as double);
}

/// A class which mocks [CostFunction].
///
/// See the documentation for Mockito's code generation for more information.
class MockCostFunction extends _i1.Mock implements _i10.CostFunction {
  MockCostFunction() {
    _i1.throwOnMissingStub(this);
  }

  @override
  double getCost(_i8.Matrix? x, _i8.Matrix? w, _i8.Matrix? y) =>
      (super.noSuchMethod(Invocation.method(#getCost, [x, w, y]),
          returnValue: 0.0) as double);
  @override
  _i8.Matrix getGradient(_i8.Matrix? x, _i8.Matrix? w, _i8.Matrix? y) =>
      (super.noSuchMethod(Invocation.method(#getGradient, [x, w, y]),
          returnValue: _FakeMatrix()) as _i8.Matrix);
  @override
  _i9.Vector getSubGradient(
          int? j, _i8.Matrix? x, _i8.Matrix? w, _i8.Matrix? y) =>
      (super.noSuchMethod(Invocation.method(#getSubGradient, [j, x, w, y]),
          returnValue: _FakeVector()) as _i9.Vector);
}

/// A class which mocks [CostFunctionFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockCostFunctionFactory extends _i1.Mock
    implements _i41.CostFunctionFactory {
  MockCostFunctionFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.CostFunction createByType(_i42.CostFunctionType? type,
          {_i43.LinkFunction? linkFunction,
          num? positiveLabel,
          num? negativeLabel}) =>
      (super.noSuchMethod(
          Invocation.method(#createByType, [
            type
          ], {
            #linkFunction: linkFunction,
            #positiveLabel: positiveLabel,
            #negativeLabel: negativeLabel
          }),
          returnValue: _FakeCostFunction()) as _i10.CostFunction);
}

/// A class which mocks [DecisionTreeClassifierFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockDecisionTreeClassifierFactory extends _i1.Mock
    implements _i44.DecisionTreeClassifierFactory {
  MockDecisionTreeClassifierFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.DecisionTreeClassifier create(
          _i21.DataFrame? trainData,
          String? targetName,
          _i45.DType? dtype,
          num? minError,
          int? minSamplesCount,
          int? maxDepth) =>
      (super.noSuchMethod(
              Invocation.method(#create, [
                trainData,
                targetName,
                dtype,
                minError,
                minSamplesCount,
                maxDepth
              ]),
              returnValue: _FakeDecisionTreeClassifier())
          as _i11.DecisionTreeClassifier);
  @override
  _i11.DecisionTreeClassifier fromJson(String? json) =>
      (super.noSuchMethod(Invocation.method(#fromJson, [json]),
              returnValue: _FakeDecisionTreeClassifier())
          as _i11.DecisionTreeClassifier);
}

/// A class which mocks [LinkFunction].
///
/// See the documentation for Mockito's code generation for more information.
class MockLinkFunction extends _i1.Mock implements _i43.LinkFunction {
  MockLinkFunction() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Matrix link(_i8.Matrix? scoresByClasses) =>
      (super.noSuchMethod(Invocation.method(#link, [scoresByClasses]),
          returnValue: _FakeMatrix()) as _i8.Matrix);
}

/// A class which mocks [InitialCoefficientsGenerator].
///
/// See the documentation for Mockito's code generation for more information.
class MockInitialCoefficientsGenerator extends _i1.Mock
    implements _i12.InitialCoefficientsGenerator {
  MockInitialCoefficientsGenerator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Vector generate(int? length) =>
      (super.noSuchMethod(Invocation.method(#generate, [length]),
          returnValue: _FakeVector()) as _i9.Vector);
}

/// A class which mocks [InitialCoefficientsGeneratorFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockInitialCoefficientsGeneratorFactory extends _i1.Mock
    implements _i46.InitialCoefficientsGeneratorFactory {
  MockInitialCoefficientsGeneratorFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.InitialCoefficientsGenerator zeroes(_i45.DType? dtype) =>
      (super.noSuchMethod(Invocation.method(#zeroes, [dtype]),
              returnValue: _FakeInitialCoefficientsGenerator())
          as _i12.InitialCoefficientsGenerator);
  @override
  _i12.InitialCoefficientsGenerator fromType(
          _i47.InitialCoefficientsType? type, _i45.DType? dtype) =>
      (super.noSuchMethod(Invocation.method(#fromType, [type, dtype]),
              returnValue: _FakeInitialCoefficientsGenerator())
          as _i12.InitialCoefficientsGenerator);
}

/// A class which mocks [ConvergenceDetector].
///
/// See the documentation for Mockito's code generation for more information.
class MockConvergenceDetector extends _i1.Mock
    implements _i23.ConvergenceDetector {
  MockConvergenceDetector() {
    _i1.throwOnMissingStub(this);
  }

  @override
  double get minDiff =>
      (super.noSuchMethod(Invocation.getter(#minDiff), returnValue: 0.0)
          as double);
  @override
  int get iterationsLimit =>
      (super.noSuchMethod(Invocation.getter(#iterationsLimit), returnValue: 0)
          as int);
  @override
  bool isConverged(double? coefficientsDiff, int? iteration) =>
      (super.noSuchMethod(
          Invocation.method(#isConverged, [coefficientsDiff, iteration]),
          returnValue: false) as bool);
}

/// A class which mocks [DistributionCalculator].
///
/// See the documentation for Mockito's code generation for more information.
class MockDistributionCalculator extends _i1.Mock
    implements _i14.DistributionCalculator {
  MockDistributionCalculator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.HashMap<T, double> calculate<T>(Iterable<T>? sequence,
          [int? classLabelsLength]) =>
      (super.noSuchMethod(
          Invocation.method(#calculate, [sequence, classLabelsLength]),
          returnValue: _FakeHashMap<T, double>()) as _i13.HashMap<T, double>);
}

/// A class which mocks [DistributionCalculatorFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockDistributionCalculatorFactory extends _i1.Mock
    implements _i48.DistributionCalculatorFactory {
  MockDistributionCalculatorFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i14.DistributionCalculator create() =>
      (super.noSuchMethod(Invocation.method(#create, []),
              returnValue: _FakeDistributionCalculator())
          as _i14.DistributionCalculator);
}

/// A class which mocks [LearningRateGeneratorFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockLearningRateGeneratorFactory extends _i1.Mock
    implements _i49.LearningRateGeneratorFactory {
  MockLearningRateGeneratorFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i15.LearningRateGenerator fromType(_i50.LearningRateType? type) =>
      (super.noSuchMethod(Invocation.method(#fromType, [type]),
              returnValue: _FakeLearningRateGenerator())
          as _i15.LearningRateGenerator);
}

/// A class which mocks [TreeLeafDetector].
///
/// See the documentation for Mockito's code generation for more information.
class MockTreeLeafDetector extends _i1.Mock implements _i17.TreeLeafDetector {
  MockTreeLeafDetector() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool isLeaf(_i8.Matrix? sample, int? targetIdx,
          Iterable<int>? featureColumnIdxs, int? treeDepth) =>
      (super.noSuchMethod(
          Invocation.method(
              #isLeaf, [sample, targetIdx, featureColumnIdxs, treeDepth]),
          returnValue: false) as bool);
}

/// A class which mocks [TreeLeafLabelFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockTreeLeafLabelFactory extends _i1.Mock
    implements _i25.TreeLeafLabelFactory {
  MockTreeLeafLabelFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i16.TreeLeafLabel create(_i8.Matrix? samples, int? targetIdx) =>
      (super.noSuchMethod(Invocation.method(#create, [samples, targetIdx]),
          returnValue: _FakeTreeLeafLabel()) as _i16.TreeLeafLabel);
}

/// A class which mocks [TreeLeafDetectorFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockTreeLeafDetectorFactory extends _i1.Mock
    implements _i51.TreeLeafDetectorFactory {
  MockTreeLeafDetectorFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i17.TreeLeafDetector create(_i35.TreeSplitAssessorType? assessorType,
          num? minErrorOnNode, int? minSamplesCount, int? maxDepth) =>
      (super.noSuchMethod(
          Invocation.method(#create,
              [assessorType, minErrorOnNode, minSamplesCount, maxDepth]),
          returnValue: _FakeTreeLeafDetector()) as _i17.TreeLeafDetector);
}

/// A class which mocks [ClassifierAssessor].
///
/// See the documentation for Mockito's code generation for more information.
class MockClassifierAssessor extends _i1.Mock
    implements _i52.ClassifierAssessor {
  MockClassifierAssessor() {
    _i1.throwOnMissingStub(this);
  }

  @override
  double assess(_i53.Classifier? classifier, _i39.MetricType? metricType,
          _i21.DataFrame? samples) =>
      (super.noSuchMethod(
          Invocation.method(#assess, [classifier, metricType, samples]),
          returnValue: 0.0) as double);
}

/// A class which mocks [KnnSolver].
///
/// See the documentation for Mockito's code generation for more information.
class MockKnnSolver extends _i1.Mock implements _i18.KnnSolver {
  MockKnnSolver() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get k =>
      (super.noSuchMethod(Invocation.getter(#k), returnValue: 0) as int);
  @override
  _i54.Distance get distanceType =>
      (super.noSuchMethod(Invocation.getter(#distanceType),
          returnValue: _i54.Distance.euclidean) as _i54.Distance);
  @override
  Iterable<Iterable<_i55.Neighbour<_i9.Vector>>> findKNeighbours(
          _i8.Matrix? features) =>
      (super.noSuchMethod(Invocation.method(#findKNeighbours, [features]),
              returnValue: <Iterable<_i55.Neighbour<_i9.Vector>>>[])
          as Iterable<Iterable<_i55.Neighbour<_i9.Vector>>>);
}

/// A class which mocks [KnnSolverFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockKnnSolverFactory extends _i1.Mock implements _i56.KnnSolverFactory {
  MockKnnSolverFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i18.KnnSolver create(_i8.Matrix? trainFeatures, _i8.Matrix? trainLabels,
          int? k, _i54.Distance? distanceType, bool? standardize) =>
      (super.noSuchMethod(
          Invocation.method(#create,
              [trainFeatures, trainLabels, k, distanceType, standardize]),
          returnValue: _FakeKnnSolver()) as _i18.KnnSolver);
}

/// A class which mocks [Kernel].
///
/// See the documentation for Mockito's code generation for more information.
class MockKernel extends _i1.Mock implements _i19.Kernel {
  MockKernel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i57.KernelType get type => (super.noSuchMethod(Invocation.getter(#type),
      returnValue: _i57.KernelType.uniform) as _i57.KernelType);
  @override
  num getWeightByDistance(num? distance, [num? bandwidth]) =>
      (super.noSuchMethod(
          Invocation.method(#getWeightByDistance, [distance, bandwidth]),
          returnValue: 0) as num);
  @override
  String toJson() =>
      (super.noSuchMethod(Invocation.method(#toJson, []), returnValue: '')
          as String);
}

/// A class which mocks [KernelFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockKernelFactory extends _i1.Mock implements _i58.KernelFactory {
  MockKernelFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Kernel createByType(_i57.KernelType? type) =>
      (super.noSuchMethod(Invocation.method(#createByType, [type]),
          returnValue: _FakeKernel()) as _i19.Kernel);
}

/// A class which mocks [KnnClassifierFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockKnnClassifierFactory extends _i1.Mock
    implements _i59.KnnClassifierFactory {
  MockKnnClassifierFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i20.KnnClassifier create(
          _i21.DataFrame? trainData,
          String? targetName,
          int? k,
          _i57.KernelType? kernelType,
          _i54.Distance? distance,
          String? columnPrefix,
          _i45.DType? dtype) =>
      (super.noSuchMethod(
          Invocation.method(#create, [
            trainData,
            targetName,
            k,
            kernelType,
            distance,
            columnPrefix,
            dtype
          ]),
          returnValue: _FakeKnnClassifier()) as _i20.KnnClassifier);
  @override
  _i20.KnnClassifier fromJson(String? json) =>
      (super.noSuchMethod(Invocation.method(#fromJson, [json]),
          returnValue: _FakeKnnClassifier()) as _i20.KnnClassifier);
}

/// A class which mocks [Classifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockClassifier extends _i1.Mock implements _i53.Classifier {
  MockClassifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  num get positiveLabel =>
      (super.noSuchMethod(Invocation.getter(#positiveLabel), returnValue: 0)
          as num);
  @override
  num get negativeLabel =>
      (super.noSuchMethod(Invocation.getter(#negativeLabel), returnValue: 0)
          as num);
  @override
  Iterable<String> get targetNames =>
      (super.noSuchMethod(Invocation.getter(#targetNames),
          returnValue: <String>[]) as Iterable<String>);
  @override
  _i45.DType get dtype => (super.noSuchMethod(Invocation.getter(#dtype),
      returnValue: _i45.DType.float32) as _i45.DType);
  @override
  _i21.DataFrame predictProbabilities(_i21.DataFrame? testFeatures) => (super
      .noSuchMethod(Invocation.method(#predictProbabilities, [testFeatures]),
          returnValue: _FakeDataFrame()) as _i21.DataFrame);
  @override
  _i21.DataFrame predict(_i21.DataFrame? testFeatures) =>
      (super.noSuchMethod(Invocation.method(#predict, [testFeatures]),
          returnValue: _FakeDataFrame()) as _i21.DataFrame);
}

/// A class which mocks [LearningRateGenerator].
///
/// See the documentation for Mockito's code generation for more information.
class MockLearningRateGenerator extends _i1.Mock
    implements _i15.LearningRateGenerator {
  MockLearningRateGenerator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void init(double? initialValue) =>
      super.noSuchMethod(Invocation.method(#init, [initialValue]),
          returnValueForMissingStub: null);
  @override
  double getNextValue() => (super
          .noSuchMethod(Invocation.method(#getNextValue, []), returnValue: 0.0)
      as double);
  @override
  void stop() => super.noSuchMethod(Invocation.method(#stop, []),
      returnValueForMissingStub: null);
}

/// A class which mocks [LinearOptimizerFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockLinearOptimizerFactory extends _i1.Mock
    implements _i60.LinearOptimizerFactory {
  MockLinearOptimizerFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i22.LinearOptimizer createByType(_i61.LinearOptimizerType? optimizerType,
          _i8.Matrix? points, _i8.Matrix? labels,
          {_i45.DType? dtype,
          _i10.CostFunction? costFunction,
          _i50.LearningRateType? learningRateType,
          _i47.InitialCoefficientsType? initialCoefficientsType,
          double? initialLearningRate,
          double? minCoefficientsUpdate,
          int? iterationLimit,
          double? lambda,
          int? batchSize,
          bool? isFittingDataNormalized,
          _i62.RegularizationType? regularizationType,
          int? randomSeed}) =>
      (super.noSuchMethod(
          Invocation.method(#createByType, [
            optimizerType,
            points,
            labels
          ], {
            #dtype: dtype,
            #costFunction: costFunction,
            #learningRateType: learningRateType,
            #initialCoefficientsType: initialCoefficientsType,
            #initialLearningRate: initialLearningRate,
            #minCoefficientsUpdate: minCoefficientsUpdate,
            #iterationLimit: iterationLimit,
            #lambda: lambda,
            #batchSize: batchSize,
            #isFittingDataNormalized: isFittingDataNormalized,
            #regularizationType: regularizationType,
            #randomSeed: randomSeed
          }),
          returnValue: _FakeLinearOptimizer()) as _i22.LinearOptimizer);
}

/// A class which mocks [LinearOptimizer].
///
/// See the documentation for Mockito's code generation for more information.
class MockLinearOptimizer extends _i1.Mock implements _i22.LinearOptimizer {
  MockLinearOptimizer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<num> get costPerIteration =>
      (super.noSuchMethod(Invocation.getter(#costPerIteration),
          returnValue: <num>[]) as List<num>);
  @override
  _i8.Matrix findExtrema(
          {_i8.Matrix? initialCoefficients,
          bool? isMinimizingObjective = true,
          bool? collectLearningData = false}) =>
      (super.noSuchMethod(
          Invocation.method(#findExtrema, [], {
            #initialCoefficients: initialCoefficients,
            #isMinimizingObjective: isMinimizingObjective,
            #collectLearningData: collectLearningData
          }),
          returnValue: _FakeMatrix()) as _i8.Matrix);
}

/// A class which mocks [ConvergenceDetectorFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockConvergenceDetectorFactory extends _i1.Mock
    implements _i63.ConvergenceDetectorFactory {
  MockConvergenceDetectorFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i23.ConvergenceDetector create(double? minUpdate, int? iterationsLimit) =>
      (super.noSuchMethod(
          Invocation.method(#create, [minUpdate, iterationsLimit]),
          returnValue: _FakeConvergenceDetector()) as _i23.ConvergenceDetector);
}

/// A class which mocks [SplitIndicesProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockSplitIndicesProvider extends _i1.Mock
    implements _i24.SplitIndicesProvider {
  MockSplitIndicesProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Iterable<Iterable<int>> getIndices(int? numberOfSamples) =>
      (super.noSuchMethod(Invocation.method(#getIndices, [numberOfSamples]),
          returnValue: <Iterable<int>>[]) as Iterable<Iterable<int>>);
}

/// A class which mocks [SplitIndicesProviderFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockSplitIndicesProviderFactory extends _i1.Mock
    implements _i64.SplitIndicesProviderFactory {
  MockSplitIndicesProviderFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i24.SplitIndicesProvider createByType(
          _i65.SplitIndicesProviderType? splitterType,
          {int? numberOfFolds,
          int? p}) =>
      (super.noSuchMethod(
              Invocation.method(#createByType, [splitterType],
                  {#numberOfFolds: numberOfFolds, #p: p}),
              returnValue: _FakeSplitIndicesProvider())
          as _i24.SplitIndicesProvider);
}

/// A class which mocks [Assessable].
///
/// See the documentation for Mockito's code generation for more information.
class MockAssessable extends _i1.Mock implements _i66.Assessable {
  MockAssessable() {
    _i1.throwOnMissingStub(this);
  }

  @override
  double assess(_i21.DataFrame? observations, _i39.MetricType? metricType) =>
      (super.noSuchMethod(
          Invocation.method(#assess, [observations, metricType]),
          returnValue: 0.0) as double);
}

/// A class which mocks [TreeLeafLabelFactoryFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockTreeLeafLabelFactoryFactory extends _i1.Mock
    implements _i67.TreeLeafLabelFactoryFactory {
  MockTreeLeafLabelFactoryFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i25.TreeLeafLabelFactory createByType(_i68.TreeLeafLabelFactoryType? type) =>
      (super.noSuchMethod(Invocation.method(#createByType, [type]),
              returnValue: _FakeTreeLeafLabelFactory())
          as _i25.TreeLeafLabelFactory);
}

/// A class which mocks [TreeSplitSelector].
///
/// See the documentation for Mockito's code generation for more information.
class MockTreeSplitSelector extends _i1.Mock implements _i26.TreeSplitSelector {
  MockTreeSplitSelector() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<_i27.TreeNode, _i8.Matrix> select(
          _i8.Matrix? samples, int? targetId, Iterable<int>? featuresColumnIdxs,
          [Map<int, List<num>>? columnIdToUniqueValues]) =>
      (super.noSuchMethod(
              Invocation.method(#select, [
                samples,
                targetId,
                featuresColumnIdxs,
                columnIdToUniqueValues
              ]),
              returnValue: <_i27.TreeNode, _i8.Matrix>{})
          as Map<_i27.TreeNode, _i8.Matrix>);
}

/// A class which mocks [TreeSplitSelectorFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockTreeSplitSelectorFactory extends _i1.Mock
    implements _i69.TreeSplitSelectorFactory {
  MockTreeSplitSelectorFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i26.TreeSplitSelector createByType(
          _i70.TreeSplitSelectorType? type,
          _i35.TreeSplitAssessorType? assessorType,
          _i37.TreeSplitterType? splitterType) =>
      (super.noSuchMethod(
          Invocation.method(#createByType, [type, assessorType, splitterType]),
          returnValue: _FakeTreeSplitSelector()) as _i26.TreeSplitSelector);
}

/// A class which mocks [TreeNode].
///
/// See the documentation for Mockito's code generation for more information.
class MockTreeNode extends _i1.Mock implements _i27.TreeNode {
  MockTreeNode() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get level =>
      (super.noSuchMethod(Invocation.getter(#level), returnValue: 0) as int);
  @override
  bool get isLeaf =>
      (super.noSuchMethod(Invocation.getter(#isLeaf), returnValue: false)
          as bool);
  @override
  bool get isRoot =>
      (super.noSuchMethod(Invocation.getter(#isRoot), returnValue: false)
          as bool);
  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(Invocation.method(#toJson, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  bool isSamplePassed(_i9.Vector? sample) =>
      (super.noSuchMethod(Invocation.method(#isSamplePassed, [sample]),
          returnValue: false) as bool);
}

/// A class which mocks [DecisionTreeTrainer].
///
/// See the documentation for Mockito's code generation for more information.
class MockDecisionTreeTrainer extends _i1.Mock
    implements _i71.DecisionTreeTrainer {
  MockDecisionTreeTrainer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i27.TreeNode train(_i8.Matrix? samples) =>
      (super.noSuchMethod(Invocation.method(#train, [samples]),
          returnValue: _FakeTreeNode()) as _i27.TreeNode);
}

/// A class which mocks [KnnClassifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockKnnClassifier extends _i1.Mock implements _i20.KnnClassifier {
  MockKnnClassifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get k =>
      (super.noSuchMethod(Invocation.getter(#k), returnValue: 0) as int);
  @override
  _i57.KernelType get kernelType =>
      (super.noSuchMethod(Invocation.getter(#kernelType),
          returnValue: _i57.KernelType.uniform) as _i57.KernelType);
  @override
  _i54.Distance get distanceType =>
      (super.noSuchMethod(Invocation.getter(#distanceType),
          returnValue: _i54.Distance.euclidean) as _i54.Distance);
}

/// A class which mocks [KnnRegressorFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockKnnRegressorFactory extends _i1.Mock
    implements _i72.KnnRegressorFactory {
  MockKnnRegressorFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i28.KnnRegressor create(
          _i21.DataFrame? fittingData,
          String? targetName,
          int? k,
          _i57.KernelType? kernelType,
          _i54.Distance? distance,
          _i45.DType? dtype) =>
      (super.noSuchMethod(
          Invocation.method(#create,
              [fittingData, targetName, k, kernelType, distance, dtype]),
          returnValue: _FakeKnnRegressor()) as _i28.KnnRegressor);
  @override
  _i28.KnnRegressor fromJson(String? json) =>
      (super.noSuchMethod(Invocation.method(#fromJson, [json]),
          returnValue: _FakeKnnRegressor()) as _i28.KnnRegressor);
}

/// A class which mocks [KnnRegressor].
///
/// See the documentation for Mockito's code generation for more information.
class MockKnnRegressor extends _i1.Mock implements _i28.KnnRegressor {
  MockKnnRegressor() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get k =>
      (super.noSuchMethod(Invocation.getter(#k), returnValue: 0) as int);
  @override
  _i57.KernelType get kernelType =>
      (super.noSuchMethod(Invocation.getter(#kernelType),
          returnValue: _i57.KernelType.uniform) as _i57.KernelType);
  @override
  _i54.Distance get distanceType =>
      (super.noSuchMethod(Invocation.getter(#distanceType),
          returnValue: _i54.Distance.euclidean) as _i54.Distance);
}

/// A class which mocks [LogisticRegressor].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogisticRegressor extends _i1.Mock implements _i31.LogisticRegressor {
  MockLogisticRegressor() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i61.LinearOptimizerType get optimizerType =>
      (super.noSuchMethod(Invocation.getter(#optimizerType),
              returnValue: _i61.LinearOptimizerType.gradient)
          as _i61.LinearOptimizerType);
  @override
  int get iterationsLimit =>
      (super.noSuchMethod(Invocation.getter(#iterationsLimit), returnValue: 0)
          as int);
  @override
  double get initialLearningRate =>
      (super.noSuchMethod(Invocation.getter(#initialLearningRate),
          returnValue: 0.0) as double);
  @override
  double get minCoefficientsUpdate =>
      (super.noSuchMethod(Invocation.getter(#minCoefficientsUpdate),
          returnValue: 0.0) as double);
  @override
  num get probabilityThreshold =>
      (super.noSuchMethod(Invocation.getter(#probabilityThreshold),
          returnValue: 0) as num);
  @override
  double get lambda =>
      (super.noSuchMethod(Invocation.getter(#lambda), returnValue: 0.0)
          as double);
  @override
  int get batchSize =>
      (super.noSuchMethod(Invocation.getter(#batchSize), returnValue: 0)
          as int);
  @override
  bool get isFittingDataNormalized =>
      (super.noSuchMethod(Invocation.getter(#isFittingDataNormalized),
          returnValue: false) as bool);
  @override
  _i50.LearningRateType get learningRateType =>
      (super.noSuchMethod(Invocation.getter(#learningRateType),
              returnValue: _i50.LearningRateType.decreasingAdaptive)
          as _i50.LearningRateType);
  @override
  _i47.InitialCoefficientsType get initialCoefficientsType =>
      (super.noSuchMethod(Invocation.getter(#initialCoefficientsType),
              returnValue: _i47.InitialCoefficientsType.zeroes)
          as _i47.InitialCoefficientsType);
}

/// A class which mocks [SoftmaxRegressor].
///
/// See the documentation for Mockito's code generation for more information.
class MockSoftmaxRegressor extends _i1.Mock implements _i29.SoftmaxRegressor {
  MockSoftmaxRegressor() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i61.LinearOptimizerType get optimizerType =>
      (super.noSuchMethod(Invocation.getter(#optimizerType),
              returnValue: _i61.LinearOptimizerType.gradient)
          as _i61.LinearOptimizerType);
  @override
  int get iterationsLimit =>
      (super.noSuchMethod(Invocation.getter(#iterationsLimit), returnValue: 0)
          as int);
  @override
  double get initialLearningRate =>
      (super.noSuchMethod(Invocation.getter(#initialLearningRate),
          returnValue: 0.0) as double);
  @override
  double get minCoefficientsUpdate =>
      (super.noSuchMethod(Invocation.getter(#minCoefficientsUpdate),
          returnValue: 0.0) as double);
  @override
  double get lambda =>
      (super.noSuchMethod(Invocation.getter(#lambda), returnValue: 0.0)
          as double);
  @override
  int get batchSize =>
      (super.noSuchMethod(Invocation.getter(#batchSize), returnValue: 0)
          as int);
  @override
  bool get isFittingDataNormalized =>
      (super.noSuchMethod(Invocation.getter(#isFittingDataNormalized),
          returnValue: false) as bool);
  @override
  _i50.LearningRateType get learningRateType =>
      (super.noSuchMethod(Invocation.getter(#learningRateType),
              returnValue: _i50.LearningRateType.decreasingAdaptive)
          as _i50.LearningRateType);
  @override
  _i47.InitialCoefficientsType get initialCoefficientsType =>
      (super.noSuchMethod(Invocation.getter(#initialCoefficientsType),
              returnValue: _i47.InitialCoefficientsType.zeroes)
          as _i47.InitialCoefficientsType);
}

/// A class which mocks [SoftmaxRegressorFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockSoftmaxRegressorFactory extends _i1.Mock
    implements _i73.SoftmaxRegressorFactory {
  MockSoftmaxRegressorFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i29.SoftmaxRegressor create(
          {_i21.DataFrame? trainData,
          Iterable<String>? targetNames,
          _i61.LinearOptimizerType? optimizerType,
          int? iterationsLimit,
          double? initialLearningRate,
          double? minCoefficientsUpdate,
          double? lambda,
          _i62.RegularizationType? regularizationType,
          int? randomSeed,
          int? batchSize,
          bool? fitIntercept,
          double? interceptScale,
          _i50.LearningRateType? learningRateType,
          bool? isFittingDataNormalized,
          _i47.InitialCoefficientsType? initialCoefficientsType,
          _i8.Matrix? initialCoefficients,
          num? positiveLabel,
          num? negativeLabel,
          bool? collectLearningData,
          _i45.DType? dtype}) =>
      (super.noSuchMethod(
          Invocation.method(#create, [], {
            #trainData: trainData,
            #targetNames: targetNames,
            #optimizerType: optimizerType,
            #iterationsLimit: iterationsLimit,
            #initialLearningRate: initialLearningRate,
            #minCoefficientsUpdate: minCoefficientsUpdate,
            #lambda: lambda,
            #regularizationType: regularizationType,
            #randomSeed: randomSeed,
            #batchSize: batchSize,
            #fitIntercept: fitIntercept,
            #interceptScale: interceptScale,
            #learningRateType: learningRateType,
            #isFittingDataNormalized: isFittingDataNormalized,
            #initialCoefficientsType: initialCoefficientsType,
            #initialCoefficients: initialCoefficients,
            #positiveLabel: positiveLabel,
            #negativeLabel: negativeLabel,
            #collectLearningData: collectLearningData,
            #dtype: dtype
          }),
          returnValue: _FakeSoftmaxRegressor()) as _i29.SoftmaxRegressor);
  @override
  _i29.SoftmaxRegressor fromJson(String? json) =>
      (super.noSuchMethod(Invocation.method(#fromJson, [json]),
          returnValue: _FakeSoftmaxRegressor()) as _i29.SoftmaxRegressor);
}

/// A class which mocks [Predictor].
///
/// See the documentation for Mockito's code generation for more information.
class MockPredictor extends _i1.Mock implements _i74.Predictor {
  MockPredictor() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Iterable<String> get targetNames =>
      (super.noSuchMethod(Invocation.getter(#targetNames),
          returnValue: <String>[]) as Iterable<String>);
  @override
  _i45.DType get dtype => (super.noSuchMethod(Invocation.getter(#dtype),
      returnValue: _i45.DType.float32) as _i45.DType);
  @override
  _i21.DataFrame predict(_i21.DataFrame? testFeatures) =>
      (super.noSuchMethod(Invocation.method(#predict, [testFeatures]),
          returnValue: _FakeDataFrame()) as _i21.DataFrame);
}

/// A class which mocks [LinearRegressorFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockLinearRegressorFactory extends _i1.Mock
    implements _i75.LinearRegressorFactory {
  MockLinearRegressorFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i30.LinearRegressor create(
          {_i21.DataFrame? fittingData,
          String? targetName,
          _i61.LinearOptimizerType? optimizerType,
          int? iterationsLimit,
          _i50.LearningRateType? learningRateType,
          _i47.InitialCoefficientsType? initialCoefficientsType,
          double? initialLearningRate,
          double? minCoefficientsUpdate,
          double? lambda,
          _i62.RegularizationType? regularizationType,
          bool? fitIntercept,
          double? interceptScale,
          int? randomSeed,
          int? batchSize,
          _i8.Matrix? initialCoefficients,
          bool? isFittingDataNormalized,
          bool? collectLearningData,
          _i45.DType? dtype}) =>
      (super.noSuchMethod(
          Invocation.method(#create, [], {
            #fittingData: fittingData,
            #targetName: targetName,
            #optimizerType: optimizerType,
            #iterationsLimit: iterationsLimit,
            #learningRateType: learningRateType,
            #initialCoefficientsType: initialCoefficientsType,
            #initialLearningRate: initialLearningRate,
            #minCoefficientsUpdate: minCoefficientsUpdate,
            #lambda: lambda,
            #regularizationType: regularizationType,
            #fitIntercept: fitIntercept,
            #interceptScale: interceptScale,
            #randomSeed: randomSeed,
            #batchSize: batchSize,
            #initialCoefficients: initialCoefficients,
            #isFittingDataNormalized: isFittingDataNormalized,
            #collectLearningData: collectLearningData,
            #dtype: dtype
          }),
          returnValue: _FakeLinearRegressor()) as _i30.LinearRegressor);
  @override
  _i30.LinearRegressor fromJson(String? json) =>
      (super.noSuchMethod(Invocation.method(#fromJson, [json]),
          returnValue: _FakeLinearRegressor()) as _i30.LinearRegressor);
}

/// A class which mocks [LinearRegressor].
///
/// See the documentation for Mockito's code generation for more information.
class MockLinearRegressor extends _i1.Mock implements _i30.LinearRegressor {
  MockLinearRegressor() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i61.LinearOptimizerType get optimizerType =>
      (super.noSuchMethod(Invocation.getter(#optimizerType),
              returnValue: _i61.LinearOptimizerType.gradient)
          as _i61.LinearOptimizerType);
  @override
  int get iterationsLimit =>
      (super.noSuchMethod(Invocation.getter(#iterationsLimit), returnValue: 0)
          as int);
  @override
  _i50.LearningRateType get learningRateType =>
      (super.noSuchMethod(Invocation.getter(#learningRateType),
              returnValue: _i50.LearningRateType.decreasingAdaptive)
          as _i50.LearningRateType);
  @override
  _i47.InitialCoefficientsType get initialCoefficientsType =>
      (super.noSuchMethod(Invocation.getter(#initialCoefficientsType),
              returnValue: _i47.InitialCoefficientsType.zeroes)
          as _i47.InitialCoefficientsType);
  @override
  num get initialLearningRate => (super
          .noSuchMethod(Invocation.getter(#initialLearningRate), returnValue: 0)
      as num);
  @override
  num get minCoefficientsUpdate =>
      (super.noSuchMethod(Invocation.getter(#minCoefficientsUpdate),
          returnValue: 0) as num);
  @override
  num get lambda =>
      (super.noSuchMethod(Invocation.getter(#lambda), returnValue: 0) as num);
  @override
  int get batchSize =>
      (super.noSuchMethod(Invocation.getter(#batchSize), returnValue: 0)
          as int);
  @override
  bool get isFittingDataNormalized =>
      (super.noSuchMethod(Invocation.getter(#isFittingDataNormalized),
          returnValue: false) as bool);
  @override
  _i9.Vector get coefficients =>
      (super.noSuchMethod(Invocation.getter(#coefficients),
          returnValue: _FakeVector()) as _i9.Vector);
  @override
  String get targetName =>
      (super.noSuchMethod(Invocation.getter(#targetName), returnValue: '')
          as String);
  @override
  bool get fitIntercept =>
      (super.noSuchMethod(Invocation.getter(#fitIntercept), returnValue: false)
          as bool);
  @override
  num get interceptScale =>
      (super.noSuchMethod(Invocation.getter(#interceptScale), returnValue: 0)
          as num);
}

/// A class which mocks [DecisionTreeClassifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockDecisionTreeClassifier extends _i1.Mock
    implements _i11.DecisionTreeClassifier {
  MockDecisionTreeClassifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  num get minError =>
      (super.noSuchMethod(Invocation.getter(#minError), returnValue: 0) as num);
  @override
  int get minSamplesCount =>
      (super.noSuchMethod(Invocation.getter(#minSamplesCount), returnValue: 0)
          as int);
  @override
  int get maxDepth =>
      (super.noSuchMethod(Invocation.getter(#maxDepth), returnValue: 0) as int);
}

/// A class which mocks [LogisticRegressorFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogisticRegressorFactory extends _i1.Mock
    implements _i76.LogisticRegressorFactory {
  MockLogisticRegressorFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i31.LogisticRegressor create(
          {_i21.DataFrame? trainData,
          String? targetName,
          _i61.LinearOptimizerType? optimizerType,
          int? iterationsLimit,
          double? initialLearningRate,
          double? minCoefficientsUpdate,
          double? probabilityThreshold,
          double? lambda,
          _i62.RegularizationType? regularizationType,
          int? randomSeed,
          int? batchSize,
          bool? fitIntercept,
          double? interceptScale,
          bool? isFittingDataNormalized,
          _i50.LearningRateType? learningRateType,
          _i47.InitialCoefficientsType? initialCoefficientsType,
          _i9.Vector? initialCoefficients,
          num? positiveLabel,
          num? negativeLabel,
          bool? collectLearningData,
          _i45.DType? dtype}) =>
      (super.noSuchMethod(
          Invocation.method(#create, [], {
            #trainData: trainData,
            #targetName: targetName,
            #optimizerType: optimizerType,
            #iterationsLimit: iterationsLimit,
            #initialLearningRate: initialLearningRate,
            #minCoefficientsUpdate: minCoefficientsUpdate,
            #probabilityThreshold: probabilityThreshold,
            #lambda: lambda,
            #regularizationType: regularizationType,
            #randomSeed: randomSeed,
            #batchSize: batchSize,
            #fitIntercept: fitIntercept,
            #interceptScale: interceptScale,
            #isFittingDataNormalized: isFittingDataNormalized,
            #learningRateType: learningRateType,
            #initialCoefficientsType: initialCoefficientsType,
            #initialCoefficients: initialCoefficients,
            #positiveLabel: positiveLabel,
            #negativeLabel: negativeLabel,
            #collectLearningData: collectLearningData,
            #dtype: dtype
          }),
          returnValue: _FakeLogisticRegressor()) as _i31.LogisticRegressor);
  @override
  _i31.LogisticRegressor fromJson(String? json) =>
      (super.noSuchMethod(Invocation.method(#fromJson, [json]),
          returnValue: _FakeLogisticRegressor()) as _i31.LogisticRegressor);
}
